本調査の目的・背景
行内におけるWebシステム開発において、JavaEEモデル(以下図を参照)各層の標準化が課題となっている。現在フレームワークはBTMU-FWに標準化され、外部システム接続層は～に標準化されている。今回は未だ行内標準化されていないインジェクション層(中でもDB接続層)をスコープとして調査を行った。尚、プレゼンテーション層の標準化については来期に調査を実施する予定である。
行内開発において、DB接続層ではJDBC、MyBatis、JPAが利用されている。本調査ではJavaEE5より標準化技術として策定されたJPAを対象とし、各種機能・生産性を調査する事でJPAがDB接続層における行内標準化技術としての妥当性を計る事を目的とする。














JPAとは
JPA(Java Persistence API)とはJavaEE5より標準化されたO/Rマッピングフレームワークであり、自動O/Rマッピングによる高い開発生産性に加えて標準API、クエリ等のDBMSに依存しないDBアクセスによる高移植性を備えている。

機能調査
O/Rマッピングの外部定義化
JPAでは、～で記載した通りエンティティクラスでアノテーションを利用してO/Rマッピングする方法が一般的だが、外部定義化する事も可能である。外部定義ファイルは永続化設定ファイル(persisetence.xml)内の<mapping-file>タグにて指定する。(デフォルトはorm.xml)また、このマッピングファイルにはO/Rマッピングだけではなくエンティティクラスと同様に名前付きクエリを定義する事も可能である。クエリを外部定義化する事により、保守性の向上が図れる。記載例を以下に示す。

フェッチ戦略
フェッチ戦略とはエンティティを検索する際に、DBMS上のデータを読み込むタイミングの事である。フェッチ戦略には以下イーガーフェッチ、レイジーフェッチが存在する。
フェッチ戦略の指定方法は以下の通り、エンティティクラスのフィールドにて他エンティティとのリレーションシップ定義する際に指定する。(以下はEagerフェッチの例)
















イーガーフェッチ
イーガーフェッチとは、エンティティを検索する際に関連するエンティティの値を全て一度のSQLでメモリに読み込む方式である。上図では、テーブルAのあるレコード、このレコードとリレーションシップを持つテーブルBのレコードをメモリに読み込む。

レイジーフェッチ
上記に対して、レイジーフェッチではSQLを発行した際にテーブルAの当該レコードのみを取得する。テーブルBのレコードについては、実際に値を呼び出す際にSQLが発行されメモリに読み込まれる。









事例調査
一般事例
各ベンダー(Oracle、IBM、日立、オージス)に対してヒアリングしたJPA事例調査の結果を以下表に示す。

行内事例
一般事例同様に行内(ダイレクトバンキング、売掛活用ファシリティシステム、通貨オプション販売管理システム(COO))へヒアリングした調査結果を以下表に示す。

上記調査より、機能概要で説明したJPQL・ネイティブクエリがシステムによって、使い分けされている事が分かる。～事例の様に、大量レコードを扱うが高い性能要件を要求されるシステムではDBMS固有のSQL(Oracle、HiRDB等におけるHint句等)が必要とされるため、ネイティブクエリが利用されている。

→各ベンダさん・COOにJPQL・ネイティブクエリの使い分けを調査する必要あり。
　使い分ける

導入効果の調査
開発生産性の向上
本項では、冒頭で記載したJPAのメリットの一つである開発生産性について定量的に評価する。JDBCと比較して、JPAが開発生産性を向上出来るポイントはO/Rマッピングの自動化、DBコネクション取得の不要化である。
以下にJDBC、JPAを利用したDAOのソースを記載する。



